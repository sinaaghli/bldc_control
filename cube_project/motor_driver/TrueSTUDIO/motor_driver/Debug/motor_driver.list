
C:\Users\sm\Google Drive\Projects\magnelab\BLDC Control\cube_project\motor_driver\TrueSTUDIO\motor_driver\Debug\motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001ebc  08001ebc  00011ebc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f1c  08001f1c  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000120  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000124  20000124  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_line   00004d2a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000c633  00000000  00000000  00024d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000209f  00000000  00000000  00031391  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00033da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000063d5  00000000  00000000  00034908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003347  00000000  00000000  0003acdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0003e024  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b20  00000000  00000000  0003e0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ea4 	.word	0x08001ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001ea4 	.word	0x08001ea4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97e 	b.w	80004dc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460e      	mov	r6, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9d08      	ldr	r5, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d150      	bne.n	80002aa <__udivmoddi4+0xb2>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96c      	bls.n	80002e8 <__udivmoddi4+0xf0>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0420 	rsb	r4, lr, #32
 800021c:	fa20 f404 	lsr.w	r4, r0, r4
 8000220:	fa01 f60e 	lsl.w	r6, r1, lr
 8000224:	ea44 0c06 	orr.w	ip, r4, r6
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000234:	0c22      	lsrs	r2, r4, #16
 8000236:	fbbc f0f9 	udiv	r0, ip, r9
 800023a:	fa1f f887 	uxth.w	r8, r7
 800023e:	fb09 c610 	mls	r6, r9, r0, ip
 8000242:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000246:	fb00 f308 	mul.w	r3, r0, r8
 800024a:	42b3      	cmp	r3, r6
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x6a>
 800024e:	19f6      	adds	r6, r6, r7
 8000250:	f100 32ff 	add.w	r2, r0, #4294967295
 8000254:	f080 8122 	bcs.w	800049c <__udivmoddi4+0x2a4>
 8000258:	42b3      	cmp	r3, r6
 800025a:	f240 811f 	bls.w	800049c <__udivmoddi4+0x2a4>
 800025e:	3802      	subs	r0, #2
 8000260:	443e      	add	r6, r7
 8000262:	1af6      	subs	r6, r6, r3
 8000264:	b2a2      	uxth	r2, r4
 8000266:	fbb6 f3f9 	udiv	r3, r6, r9
 800026a:	fb09 6613 	mls	r6, r9, r3, r6
 800026e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000272:	fb03 f808 	mul.w	r8, r3, r8
 8000276:	45a0      	cmp	r8, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x96>
 800027a:	19e4      	adds	r4, r4, r7
 800027c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x2a0>
 8000284:	45a0      	cmp	r8, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x2a0>
 800028a:	3b02      	subs	r3, #2
 800028c:	443c      	add	r4, r7
 800028e:	ebc8 0404 	rsb	r4, r8, r4
 8000292:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	2d00      	cmp	r5, #0
 800029a:	d062      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029c:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a0:	2300      	movs	r3, #0
 80002a2:	602c      	str	r4, [r5, #0]
 80002a4:	606b      	str	r3, [r5, #4]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0xc6>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	d055      	beq.n	800035e <__udivmoddi4+0x166>
 80002b2:	2100      	movs	r1, #0
 80002b4:	e885 0041 	stmia.w	r5, {r0, r6}
 80002b8:	4608      	mov	r0, r1
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	f040 8090 	bne.w	80003e8 <__udivmoddi4+0x1f0>
 80002c8:	42b3      	cmp	r3, r6
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xda>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb66 0603 	sbc.w	r6, r6, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	46b4      	mov	ip, r6
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d040      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e0:	e885 1010 	stmia.w	r5, {r4, ip}
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	b912      	cbnz	r2, 80002f0 <__udivmoddi4+0xf8>
 80002ea:	2701      	movs	r7, #1
 80002ec:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f0:	fab7 fe87 	clz	lr, r7
 80002f4:	f1be 0f00 	cmp.w	lr, #0
 80002f8:	d135      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fa:	1bf3      	subs	r3, r6, r7
 80002fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f0f8 	udiv	r0, r3, r8
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb08 3610 	mls	r6, r8, r0, r3
 8000310:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000314:	fb0c f300 	mul.w	r3, ip, r0
 8000318:	42b3      	cmp	r3, r6
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19f6      	adds	r6, r6, r7
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42b3      	cmp	r3, r6
 8000326:	f200 80ce 	bhi.w	80004c6 <__udivmoddi4+0x2ce>
 800032a:	4610      	mov	r0, r2
 800032c:	1af6      	subs	r6, r6, r3
 800032e:	b2a2      	uxth	r2, r4
 8000330:	fbb6 f3f8 	udiv	r3, r6, r8
 8000334:	fb08 6613 	mls	r6, r8, r3, r6
 8000338:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800033c:	fb0c fc03 	mul.w	ip, ip, r3
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f103 32ff 	add.w	r2, r3, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b5 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 8000352:	4613      	mov	r3, r2
 8000354:	ebcc 0404 	rsb	r4, ip, r4
 8000358:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800035c:	e79c      	b.n	8000298 <__udivmoddi4+0xa0>
 800035e:	4629      	mov	r1, r5
 8000360:	4628      	mov	r0, r5
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0120 	rsb	r1, lr, #32
 800036a:	fa06 f30e 	lsl.w	r3, r6, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f901 	lsr.w	r9, r0, r1
 8000376:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037a:	40ce      	lsrs	r6, r1
 800037c:	ea49 0903 	orr.w	r9, r9, r3
 8000380:	fbb6 faf8 	udiv	sl, r6, r8
 8000384:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000388:	fb08 661a 	mls	r6, r8, sl, r6
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000394:	fb0a f20c 	mul.w	r2, sl, ip
 8000398:	429a      	cmp	r2, r3
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1be>
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003a6:	f080 8087 	bcs.w	80004b8 <__udivmoddi4+0x2c0>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f240 8084 	bls.w	80004b8 <__udivmoddi4+0x2c0>
 80003b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80003b4:	443b      	add	r3, r7
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	fa1f f989 	uxth.w	r9, r9
 80003bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c0:	fb08 3311 	mls	r3, r8, r1, r3
 80003c4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003c8:	fb01 f60c 	mul.w	r6, r1, ip
 80003cc:	429e      	cmp	r6, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1e8>
 80003d0:	19db      	adds	r3, r3, r7
 80003d2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 80003d8:	429e      	cmp	r6, r3
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003e6:	e78e      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e8:	f1c1 0e20 	rsb	lr, r1, #32
 80003ec:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f0:	408b      	lsls	r3, r1
 80003f2:	4323      	orrs	r3, r4
 80003f4:	fa20 f70e 	lsr.w	r7, r0, lr
 80003f8:	fa06 f401 	lsl.w	r4, r6, r1
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	fa26 f60e 	lsr.w	r6, r6, lr
 8000404:	433c      	orrs	r4, r7
 8000406:	fbb6 f9fc 	udiv	r9, r6, ip
 800040a:	0c27      	lsrs	r7, r4, #16
 800040c:	fb0c 6619 	mls	r6, ip, r9, r6
 8000410:	fa1f f883 	uxth.w	r8, r3
 8000414:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000418:	fb09 f708 	mul.w	r7, r9, r8
 800041c:	42b7      	cmp	r7, r6
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	fa00 fa01 	lsl.w	sl, r0, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x242>
 8000428:	18f6      	adds	r6, r6, r3
 800042a:	f109 30ff 	add.w	r0, r9, #4294967295
 800042e:	d241      	bcs.n	80004b4 <__udivmoddi4+0x2bc>
 8000430:	42b7      	cmp	r7, r6
 8000432:	d93f      	bls.n	80004b4 <__udivmoddi4+0x2bc>
 8000434:	f1a9 0902 	sub.w	r9, r9, #2
 8000438:	441e      	add	r6, r3
 800043a:	1bf6      	subs	r6, r6, r7
 800043c:	b2a0      	uxth	r0, r4
 800043e:	fbb6 f4fc 	udiv	r4, r6, ip
 8000442:	fb0c 6614 	mls	r6, ip, r4, r6
 8000446:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800044a:	fb04 f808 	mul.w	r8, r4, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x26a>
 8000452:	18ff      	adds	r7, r7, r3
 8000454:	f104 30ff 	add.w	r0, r4, #4294967295
 8000458:	d228      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d926      	bls.n	80004ac <__udivmoddi4+0x2b4>
 800045e:	3c02      	subs	r4, #2
 8000460:	441f      	add	r7, r3
 8000462:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000466:	ebc8 0707 	rsb	r7, r8, r7
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	4644      	mov	r4, r8
 8000472:	464e      	mov	r6, r9
 8000474:	d314      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	d029      	beq.n	80004cc <__udivmoddi4+0x2d4>
 8000478:	b365      	cbz	r5, 80004d4 <__udivmoddi4+0x2dc>
 800047a:	ebba 0304 	subs.w	r3, sl, r4
 800047e:	eb67 0706 	sbc.w	r7, r7, r6
 8000482:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000486:	40cb      	lsrs	r3, r1
 8000488:	40cf      	lsrs	r7, r1
 800048a:	ea4e 0303 	orr.w	r3, lr, r3
 800048e:	e885 0088 	stmia.w	r5, {r3, r7}
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	4613      	mov	r3, r2
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x96>
 800049c:	4610      	mov	r0, r2
 800049e:	e6e0      	b.n	8000262 <__udivmoddi4+0x6a>
 80004a0:	ebb8 0402 	subs.w	r4, r8, r2
 80004a4:	eb69 0603 	sbc.w	r6, r9, r3
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7e5      	b.n	8000478 <__udivmoddi4+0x280>
 80004ac:	4604      	mov	r4, r0
 80004ae:	e7d8      	b.n	8000462 <__udivmoddi4+0x26a>
 80004b0:	4611      	mov	r1, r2
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1e8>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7c0      	b.n	800043a <__udivmoddi4+0x242>
 80004b8:	468a      	mov	sl, r1
 80004ba:	e77c      	b.n	80003b6 <__udivmoddi4+0x1be>
 80004bc:	3b02      	subs	r3, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e748      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xe4>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443e      	add	r6, r7
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x134>
 80004cc:	45c2      	cmp	sl, r8
 80004ce:	d3e7      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80004d0:	463e      	mov	r6, r7
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x280>
 80004d4:	4629      	mov	r1, r5
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004e6:	e003      	b.n	80004f0 <LoopCopyDataInit>

080004e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ee:	3104      	adds	r1, #4

080004f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004f8:	d3f6      	bcc.n	80004e8 <CopyDataInit>
  ldr  r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004fc:	e002      	b.n	8000504 <LoopFillZerobss>

080004fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000500:	f842 3b04 	str.w	r3, [r2], #4

08000504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000508:	d3f9      	bcc.n	80004fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800050a:	f000 fb1f 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 fca3 	bl	8001e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f000 f96f 	bl	80007f4 <main>
  bx  lr    
 8000516:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800051c:	08001f20 	.word	0x08001f20
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000524:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000528:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800052c:	20000124 	.word	0x20000124

08000530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8000536:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_ADC1_Init+0x54>)
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_ADC1_Init+0x58>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <MX_ADC1_Init+0x5c>)
{
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800053c:	6003      	str	r3, [r0, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053e:	6282      	str	r2, [r0, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000540:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000542:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000544:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000548:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054a:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800054c:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000552:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000554:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000556:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	f000 fb5a 	bl	8000c10 <HAL_ADC_Init>
 800055c:	b118      	cbz	r0, 8000566 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800055e:	2148      	movs	r1, #72	; 0x48
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_ADC1_Init+0x60>)
 8000562:	f000 f957 	bl	8000814 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000566:	2104      	movs	r1, #4
 8000568:	2201      	movs	r2, #1
 800056a:	2300      	movs	r3, #0
 800056c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x54>)
 8000572:	4669      	mov	r1, sp
 8000574:	f000 fbf0 	bl	8000d58 <HAL_ADC_ConfigChannel>
 8000578:	b118      	cbz	r0, 8000582 <MX_ADC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800057a:	2152      	movs	r1, #82	; 0x52
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_ADC1_Init+0x60>)
 800057e:	f000 f949 	bl	8000814 <_Error_Handler>
  }

}
 8000582:	b005      	add	sp, #20
 8000584:	f85d fb04 	ldr.w	pc, [sp], #4
 8000588:	20000020 	.word	0x20000020
 800058c:	40012000 	.word	0x40012000
 8000590:	0f000001 	.word	0x0f000001
 8000594:	08001ebc 	.word	0x08001ebc

08000598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000598:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800059a:	6802      	ldr	r2, [r0, #0]
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_ADC_MspInit+0x4c>)
 800059e:	429a      	cmp	r2, r3
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80005a2:	d11c      	bne.n	80005de <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a4:	2400      	movs	r4, #0
 80005a6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <HAL_ADC_MspInit+0x50>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b4:	645a      	str	r2, [r3, #68]	; 0x44
 80005b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005be:	2503      	movs	r5, #3
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c0:	9300      	str	r3, [sp, #0]
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c4:	9b00      	ldr	r3, [sp, #0]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c6:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	f000 fcd5 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = bat_vol_Pin|curr_sen1_Pin;
 80005ce:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	a901      	add	r1, sp, #4
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = bat_vol_Pin|curr_sen1_Pin;
 80005d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f000 fccd 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	b007      	add	sp, #28
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020000 	.word	0x40020000

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005f4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	2400      	movs	r4, #0
 80005f8:	4b4e      	ldr	r3, [pc, #312]	; (8000734 <MX_GPIO_Init+0x144>)
 80005fa:	9401      	str	r4, [sp, #4]
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 80005fe:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8000748 <MX_GPIO_Init+0x158>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_HA_Pin|P_HB_Pin|P_HC_Pin|en_gate_Pin, GPIO_PIN_RESET);
 8000602:	4f4d      	ldr	r7, [pc, #308]	; (8000738 <MX_GPIO_Init+0x148>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin, GPIO_PIN_RESET);
 8000604:	4d4d      	ldr	r5, [pc, #308]	; (800073c <MX_GPIO_Init+0x14c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	f042 0210 	orr.w	r2, r2, #16
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f002 0210 	and.w	r2, r2, #16
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	9402      	str	r4, [sp, #8]
 8000618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
 8000620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000622:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000626:	9202      	str	r2, [sp, #8]
 8000628:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	9403      	str	r4, [sp, #12]
 800062c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062e:	f042 0204 	orr.w	r2, r2, #4
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f002 0204 	and.w	r2, r2, #4
 800063a:	9203      	str	r2, [sp, #12]
 800063c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	9404      	str	r4, [sp, #16]
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	f042 0201 	orr.w	r2, r2, #1
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	f002 0201 	and.w	r2, r2, #1
 800064e:	9204      	str	r2, [sp, #16]
 8000650:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	9405      	str	r4, [sp, #20]
 8000654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000656:	f042 0202 	orr.w	r2, r2, #2
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
 800065c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065e:	f002 0202 	and.w	r2, r2, #2
 8000662:	9205      	str	r2, [sp, #20]
 8000664:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	9406      	str	r4, [sp, #24]
 8000668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066a:	f042 0208 	orr.w	r2, r2, #8
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000678:	4622      	mov	r2, r4
 800067a:	4640      	mov	r0, r8
 800067c:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000680:	f000 fd5a 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_HA_Pin|P_HB_Pin|P_HC_Pin|en_gate_Pin, GPIO_PIN_RESET);
 8000684:	4622      	mov	r2, r4
 8000686:	4638      	mov	r0, r7
 8000688:	f240 1107 	movw	r1, #263	; 0x107
 800068c:	f000 fd54 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin, GPIO_PIN_RESET);
 8000690:	4622      	mov	r2, r4
 8000692:	4628      	mov	r0, r5
 8000694:	210d      	movs	r1, #13
 8000696:	f000 fd4f 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2601      	movs	r6, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 800069c:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069e:	a907      	add	r1, sp, #28
 80006a0:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 80006a2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006aa:	f000 fc65 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = P_HA_Pin|P_HB_Pin|P_HC_Pin|en_gate_Pin;
 80006ae:	f240 1307 	movw	r3, #263	; 0x107
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	a907      	add	r1, sp, #28
 80006b4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = P_HA_Pin|P_HB_Pin|P_HC_Pin|en_gate_Pin;
 80006b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f000 fc5b 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = fault_in_Pin|octw_in_Pin|gain_in_Pin;
 80006c2:	f248 1302 	movw	r3, #33026	; 0x8102
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c6:	a907      	add	r1, sp, #28
 80006c8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = fault_in_Pin|octw_in_Pin|gain_in_Pin;
 80006ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d0:	f000 fc52 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = hall1_exti9_Pin|hall2_exti10_Pin|hall3_exti11_Pin;
 80006d4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80006d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006da:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = hall1_exti9_Pin|hall2_exti10_Pin|hall3_exti11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_GPIO_Init+0x150>)
 80006de:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e0:	4628      	mov	r0, r5
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = hall1_exti9_Pin|hall2_exti10_Pin|hall3_exti11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	f000 fc48 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRGD_in_Pin;
 80006e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PWRGD_in_GPIO_Port, &GPIO_InitStruct);
 80006ec:	a907      	add	r1, sp, #28
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRGD_in_Pin;
 80006f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(PWRGD_in_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f000 fc3f 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin;
 80006fa:	230d      	movs	r3, #13
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	a907      	add	r1, sp, #28
 80006fe:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PWRGD_in_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = dc_cal_out_Pin|m_ob_out_Pin|mpem_out_Pin;
 8000700:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f000 fc36 	bl	8000f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800070c:	4622      	mov	r2, r4
 800070e:	4621      	mov	r1, r4
 8000710:	2017      	movs	r0, #23
 8000712:	f000 fbc9 	bl	8000ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000716:	2017      	movs	r0, #23
 8000718:	f000 fbfa 	bl	8000f10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800071c:	4622      	mov	r2, r4
 800071e:	4621      	mov	r1, r4
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f000 fbc1 	bl	8000ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000726:	2028      	movs	r0, #40	; 0x28
 8000728:	f000 fbf2 	bl	8000f10 <HAL_NVIC_EnableIRQ>

}
 800072c:	b00c      	add	sp, #48	; 0x30
 800072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400
 800073c:	40020c00 	.word	0x40020c00
 8000740:	10310000 	.word	0x10310000
 8000744:	40020000 	.word	0x40020000
 8000748:	40021000 	.word	0x40021000

0800074c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <SystemClock_Config+0xa0>)
 8000752:	2100      	movs	r1, #0
 8000754:	9101      	str	r1, [sp, #4]
 8000756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <SystemClock_Config+0xa4>)
 800076a:	9102      	str	r1, [sp, #8]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000786:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000788:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078e:	2404      	movs	r4, #4
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000794:	23a0      	movs	r3, #160	; 0xa0

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800079a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f000 fcdc 	bl	800115c <HAL_RCC_OscConfig>
 80007a4:	b100      	cbz	r0, 80007a8 <SystemClock_Config+0x5c>
 80007a6:	e7fe      	b.n	80007a6 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80007ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b2:	2105      	movs	r1, #5
 80007b4:	a803      	add	r0, sp, #12

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80007b8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80007ba:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007bc:	f000 fe68 	bl	8001490 <HAL_RCC_ClockConfig>
 80007c0:	4605      	mov	r5, r0
 80007c2:	b100      	cbz	r0, 80007c6 <SystemClock_Config+0x7a>
 80007c4:	e7fe      	b.n	80007c4 <SystemClock_Config+0x78>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007c6:	f000 fefb 	bl	80015c0 <HAL_RCC_GetHCLKFreq>
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80007d2:	f000 fba9 	bl	8000f28 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007d6:	4620      	mov	r0, r4
 80007d8:	f000 fbbc 	bl	8000f54 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007dc:	462a      	mov	r2, r5
 80007de:	4629      	mov	r1, r5
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 fb60 	bl	8000ea8 <HAL_NVIC_SetPriority>
}
 80007e8:	b015      	add	sp, #84	; 0x54
 80007ea:	bd30      	pop	{r4, r5, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80007f4:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 f9e3 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f7ff ffa7 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f7ff fef7 	bl	80005f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000802:	f7ff fe97 	bl	8000534 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000806:	f000 f85d 	bl	80008c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800080a:	f000 f8ef 	bl	80009ec <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800080e:	f000 f953 	bl	8000ab8 <MX_USART3_UART_Init>
 8000812:	e7fe      	b.n	8000812 <main+0x1e>

08000814 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000814:	e7fe      	b.n	8000814 <_Error_Handler>

08000816 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000816:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 fb33 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	4611      	mov	r1, r2
 8000822:	f06f 000b 	mvn.w	r0, #11
 8000826:	f000 fb3f 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	4611      	mov	r1, r2
 800082e:	f06f 000a 	mvn.w	r0, #10
 8000832:	f000 fb39 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	4611      	mov	r1, r2
 800083a:	f06f 0009 	mvn.w	r0, #9
 800083e:	f000 fb33 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	4611      	mov	r1, r2
 8000846:	f06f 0004 	mvn.w	r0, #4
 800084a:	f000 fb2d 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	4611      	mov	r1, r2
 8000852:	f06f 0003 	mvn.w	r0, #3
 8000856:	f000 fb27 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	4611      	mov	r1, r2
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fb21 	bl	8000ea8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	4611      	mov	r1, r2
 800086a:	f04f 30ff 	mov.w	r0, #4294967295
 800086e:	f000 fb1b 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2005      	movs	r0, #5
 8000876:	4611      	mov	r1, r2
 8000878:	f000 fb16 	bl	8000ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800087c:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000882:	f000 bb45 	b.w	8000f10 <HAL_NVIC_EnableIRQ>

08000886 <NMI_Handler>:
 8000886:	4770      	bx	lr

08000888 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000888:	e7fe      	b.n	8000888 <HardFault_Handler>

0800088a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800088a:	e7fe      	b.n	800088a <MemManage_Handler>

0800088c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800088c:	e7fe      	b.n	800088c <BusFault_Handler>

0800088e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800088e:	e7fe      	b.n	800088e <UsageFault_Handler>

08000890 <SVC_Handler>:
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000896:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f9ac 	bl	8000bf4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80008a0:	f000 bb65 	b.w	8000f6e <HAL_SYSTICK_IRQHandler>

080008a4 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80008a4:	4770      	bx	lr

080008a6 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80008a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008aa:	f000 bc4b 	b.w	8001144 <HAL_GPIO_EXTI_IRQHandler>

080008ae <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80008ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80008b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008b4:	f000 fc46 	bl	8001144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80008b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80008c0:	f000 bc40 	b.w	8001144 <HAL_GPIO_EXTI_IRQHandler>

080008c4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008c4:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM3_Init+0x54>)
  htim3.Init.Prescaler = 0;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_TIM3_Init+0x58>)
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008ca:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 80008cc:	2400      	movs	r4, #0
 80008ce:	e880 0018 	stmia.w	r0, {r3, r4}
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008d2:	a903      	add	r1, sp, #12
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d4:	2301      	movs	r3, #1
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 80008d8:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	6104      	str	r4, [r0, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008dc:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008de:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e0:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e2:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80008e4:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ea:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008ec:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008ee:	f001 f865 	bl	80019bc <HAL_TIM_Encoder_Init>
 80008f2:	b118      	cbz	r0, 80008fc <MX_TIM3_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008f4:	214a      	movs	r1, #74	; 0x4a
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <MX_TIM3_Init+0x5c>)
 80008f8:	f7ff ff8c 	bl	8000814 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fc:	a901      	add	r1, sp, #4
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0x54>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000904:	f001 f939 	bl	8001b7a <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	b118      	cbz	r0, 8000912 <MX_TIM3_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800090a:	2151      	movs	r1, #81	; 0x51
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_TIM3_Init+0x5c>)
 800090e:	f7ff ff81 	bl	8000814 <_Error_Handler>
  }

}
 8000912:	b00c      	add	sp, #48	; 0x30
 8000914:	bd10      	pop	{r4, pc}
 8000916:	bf00      	nop
 8000918:	200000a4 	.word	0x200000a4
 800091c:	40000400 	.word	0x40000400
 8000920:	08001ecf 	.word	0x08001ecf

08000924 <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM3)
 8000926:	6802      	ldr	r2, [r0, #0]
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_TIM_Encoder_MspInit+0x40>)
 800092a:	429a      	cmp	r2, r3
 800092c:	d116      	bne.n	800095c <HAL_TIM_Encoder_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_TIM_Encoder_MspInit+0x44>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <HAL_TIM_Encoder_MspInit+0x48>)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000938:	f041 0102 	orr.w	r1, r1, #2
 800093c:	6411      	str	r1, [r2, #64]	; 0x40
 800093e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	9303      	str	r3, [sp, #12]
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000942:	f002 0202 	and.w	r2, r2, #2
 8000946:	9200      	str	r2, [sp, #0]
 8000948:	9a00      	ldr	r2, [sp, #0]
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	9304      	str	r3, [sp, #16]
  
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800094c:	22c0      	movs	r2, #192	; 0xc0
 800094e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	a901      	add	r1, sp, #4
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2202      	movs	r2, #2
 8000954:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000956:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f000 fb0e 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800095c:	b007      	add	sp, #28
 800095e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000962:	bf00      	nop
 8000964:	40000400 	.word	0x40000400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020800 	.word	0x40020800

08000970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8000970:	6802      	ldr	r2, [r0, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x28>)
 8000974:	429a      	cmp	r2, r3
  /* USER CODE END TIM3_MspInit 1 */
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000976:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM4)
 8000978:	d10b      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_TIM_Base_MspInit+0x2c>)
 8000980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000982:	f042 0204 	orr.w	r2, r2, #4
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000992:	b002      	add	sp, #8
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40000800 	.word	0x40000800
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009a0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM4)
 80009a2:	6802      	ldr	r2, [r0, #0]
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_TIM_MspPostInit+0x40>)
 80009a6:	429a      	cmp	r2, r3

  /* USER CODE END TIM4_MspInit 1 */
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009a8:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM4)
 80009aa:	d116      	bne.n	80009da <HAL_TIM_MspPostInit+0x3a>
    PD14     ------> TIM4_CH3
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = P_LC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2500      	movs	r5, #0
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = P_LC_Pin;
 80009b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(P_LC_GPIO_Port, &GPIO_InitStruct);
 80009b4:	a901      	add	r1, sp, #4
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_TIM_MspPostInit+0x44>)
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = P_LC_Pin;
 80009b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009c0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(P_LC_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f000 fad9 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = P_LA_Pin|P_LB_Pin;
 80009c6:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	a901      	add	r1, sp, #4
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(P_LC_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = P_LA_Pin|P_LB_Pin;
 80009cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009d4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f000 facf 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80009da:	b007      	add	sp, #28
 80009dc:	bd30      	pop	{r4, r5, pc}
 80009de:	bf00      	nop
 80009e0:	40000800 	.word	0x40000800
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020400 	.word	0x40020400

080009ec <MX_TIM4_Init>:
  }

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009ec:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 80009ee:	482f      	ldr	r0, [pc, #188]	; (8000aac <MX_TIM4_Init+0xc0>)
  htim4.Init.Prescaler = 100;
 80009f0:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <MX_TIM4_Init+0xc4>)
 80009f2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80009f6:	e880 4008 	stmia.w	r0, {r3, lr}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	2300      	movs	r3, #0
  }

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009fc:	b08f      	sub	sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 100;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8000a00:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a06:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a08:	f000 ffa4 	bl	8001954 <HAL_TIM_Base_Init>
 8000a0c:	b118      	cbz	r0, 8000a16 <MX_TIM4_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a0e:	2163      	movs	r1, #99	; 0x63
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a12:	f7ff feff 	bl	8000814 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	a90e      	add	r1, sp, #56	; 0x38
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a20:	4822      	ldr	r0, [pc, #136]	; (8000aac <MX_TIM4_Init+0xc0>)
 8000a22:	f000 fe78 	bl	8001716 <HAL_TIM_ConfigClockSource>
 8000a26:	b118      	cbz	r0, 8000a30 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a28:	2169      	movs	r1, #105	; 0x69
 8000a2a:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a2c:	f7ff fef2 	bl	8000814 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a30:	481e      	ldr	r0, [pc, #120]	; (8000aac <MX_TIM4_Init+0xc0>)
 8000a32:	f000 ffa9 	bl	8001988 <HAL_TIM_PWM_Init>
 8000a36:	b118      	cbz	r0, 8000a40 <MX_TIM4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a38:	216e      	movs	r1, #110	; 0x6e
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a3c:	f7ff feea 	bl	8000814 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a42:	a901      	add	r1, sp, #4
 8000a44:	4819      	ldr	r0, [pc, #100]	; (8000aac <MX_TIM4_Init+0xc0>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a4a:	f001 f896 	bl	8001b7a <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	b118      	cbz	r0, 8000a58 <MX_TIM4_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a50:	2175      	movs	r1, #117	; 0x75
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a54:	f7ff fede 	bl	8000814 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8000a58:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5c:	a907      	add	r1, sp, #28
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_TIM4_Init+0xc0>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a60:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8000a62:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a68:	f001 f824 	bl	8001ab4 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	b118      	cbz	r0, 8000a76 <MX_TIM4_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a6e:	217e      	movs	r1, #126	; 0x7e
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a72:	f7ff fecf 	bl	8000814 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a76:	2204      	movs	r2, #4
 8000a78:	a907      	add	r1, sp, #28
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM4_Init+0xc0>)
 8000a7c:	f001 f81a 	bl	8001ab4 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	b118      	cbz	r0, 8000a8a <MX_TIM4_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a82:	2183      	movs	r1, #131	; 0x83
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a86:	f7ff fec5 	bl	8000814 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	a907      	add	r1, sp, #28
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_TIM4_Init+0xc0>)
 8000a90:	f001 f810 	bl	8001ab4 <HAL_TIM_PWM_ConfigChannel>
 8000a94:	b118      	cbz	r0, 8000a9e <MX_TIM4_Init+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a96:	2188      	movs	r1, #136	; 0x88
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_TIM4_Init+0xc8>)
 8000a9a:	f7ff febb 	bl	8000814 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_TIM4_Init+0xc0>)
 8000aa0:	f7ff ff7e 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 8000aa4:	b00f      	add	sp, #60	; 0x3c
 8000aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aaa:	bf00      	nop
 8000aac:	20000068 	.word	0x20000068
 8000ab0:	40000800 	.word	0x40000800
 8000ab4:	08001ecf 	.word	0x08001ecf

08000ab8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ab8:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART3_UART_Init+0x38>)
 8000abe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8000ac2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac6:	220c      	movs	r2, #12
void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000acc:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	f001 f991 	bl	8001dfc <HAL_UART_Init>
 8000ada:	b128      	cbz	r0, 8000ae8 <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000adc:	2142      	movs	r1, #66	; 0x42
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x3c>)
  }

}
 8000ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ae4:	f7ff be96 	b.w	8000814 <_Error_Handler>
 8000ae8:	bd08      	pop	{r3, pc}
 8000aea:	bf00      	nop
 8000aec:	200000e0 	.word	0x200000e0
 8000af0:	40004800 	.word	0x40004800
 8000af4:	08001ee2 	.word	0x08001ee2

08000af8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8000afa:	6802      	ldr	r2, [r0, #0]
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x48>)
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d11a      	bne.n	8000b38 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <HAL_UART_MspInit+0x50>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b10:	641a      	str	r2, [r3, #64]	; 0x40
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b20:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b30:	2307      	movs	r3, #7
 8000b32:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f000 fa20 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b38:	b007      	add	sp, #28
 8000b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b3e:	bf00      	nop
 8000b40:	40004800 	.word	0x40004800
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	490f      	ldr	r1, [pc, #60]	; (8000b8c <SystemInit+0x40>)
 8000b4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <SystemInit+0x44>)
 8000b5c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b5e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b60:	f042 0201 	orr.w	r2, r2, #1
 8000b64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <SystemInit+0x48>)
 8000b76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b80:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b86:	608b      	str	r3, [r1, #8]
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	40023800 	.word	0x40023800
 8000b94:	24003010 	.word	0x24003010

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ba8:	f000 f9be 	bl	8000f28 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	4621      	mov	r1, r4
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f978 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000bb8:	2000      	movs	r0, #0
 8000bba:	bd10      	pop	{r4, pc}
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x30>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bd2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f951 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ffd8 	bl	8000b98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe15 	bl	8000816 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000bec:	2000      	movs	r0, #0
 8000bee:	bd08      	pop	{r3, pc}
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bf4:	4a02      	ldr	r2, [pc, #8]	; (8000c00 <HAL_IncTick+0xc>)
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000120 	.word	0x20000120

08000c04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <HAL_GetTick+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000120 	.word	0x20000120

08000c10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c10:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c12:	4604      	mov	r4, r0
 8000c14:	2800      	cmp	r0, #0
 8000c16:	f000 8098 	beq.w	8000d4a <HAL_ADC_Init+0x13a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c1c:	b923      	cbnz	r3, 8000c28 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c24:	f7ff fcb8 	bl	8000598 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c2a:	06db      	lsls	r3, r3, #27
 8000c2c:	f100 8088 	bmi.w	8000d40 <HAL_ADC_Init+0x130>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c36:	f023 0302 	bic.w	r3, r3, #2
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c40:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_ADC_Init+0x140>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c48:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c52:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c54:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c56:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c5e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c6e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c70:	6859      	ldr	r1, [r3, #4]
 8000c72:	68a2      	ldr	r2, [r4, #8]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c80:	6899      	ldr	r1, [r3, #8]
 8000c82:	68e2      	ldr	r2, [r4, #12]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <HAL_ADC_Init+0x144>)
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d00e      	beq.n	8000cac <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c8e:	6899      	ldr	r1, [r3, #8]
 8000c90:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000c94:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	e006      	b.n	8000cba <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cba:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cbc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cbe:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cc0:	f022 0202 	bic.w	r2, r2, #2
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000ccc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cce:	6a22      	ldr	r2, [r4, #32]
 8000cd0:	b16a      	cbz	r2, 8000cee <HAL_ADC_Init+0xde>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cd8:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ce0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ce4:	6859      	ldr	r1, [r3, #4]
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8000cec:	e002      	b.n	8000cf4 <HAL_ADC_Init+0xe4>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cf4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cfe:	69e2      	ldr	r2, [r4, #28]
 8000d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d02:	3a01      	subs	r2, #1
 8000d04:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d0a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000d1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d1c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d1e:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d26:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d2a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000d2e:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d30:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d34:	f023 0303 	bic.w	r3, r3, #3
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6423      	str	r3, [r4, #64]	; 0x40
 8000d3e:	e000      	b.n	8000d42 <HAL_ADC_Init+0x132>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d40:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d42:	2300      	movs	r3, #0
 8000d44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d48:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000d4a:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	40012300 	.word	0x40012300
 8000d54:	0f000001 	.word	0x0f000001

08000d58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d069      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d66:	680d      	ldr	r5, [r1, #0]
 8000d68:	6804      	ldr	r4, [r0, #0]
 8000d6a:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6c:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d6e:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000d74:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d76:	d910      	bls.n	8000d9a <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d78:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000d7c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8000d80:	f1a2 031e 	sub.w	r3, r2, #30
 8000d84:	2207      	movs	r2, #7
 8000d86:	409a      	lsls	r2, r3
 8000d88:	ea2e 0202 	bic.w	r2, lr, r2
 8000d8c:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d8e:	68e2      	ldr	r2, [r4, #12]
 8000d90:	fa07 f303 	lsl.w	r3, r7, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60e3      	str	r3, [r4, #12]
 8000d98:	e00e      	b.n	8000db8 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d9a:	6922      	ldr	r2, [r4, #16]
 8000d9c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000da0:	f04f 0e07 	mov.w	lr, #7
 8000da4:	fa0e fe03 	lsl.w	lr, lr, r3
 8000da8:	ea22 020e 	bic.w	r2, r2, lr
 8000dac:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000dae:	6922      	ldr	r2, [r4, #16]
 8000db0:	fa07 f303 	lsl.w	r3, r7, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db8:	684b      	ldr	r3, [r1, #4]
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000dc0:	d80d      	bhi.n	8000dde <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dc2:	4413      	add	r3, r2
 8000dc4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000dc6:	1f59      	subs	r1, r3, #5
 8000dc8:	231f      	movs	r3, #31
 8000dca:	408b      	lsls	r3, r1
 8000dcc:	ea27 0303 	bic.w	r3, r7, r3
 8000dd0:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000dd4:	fa06 f101 	lsl.w	r1, r6, r1
 8000dd8:	4311      	orrs	r1, r2
 8000dda:	6361      	str	r1, [r4, #52]	; 0x34
 8000ddc:	e01d      	b.n	8000e1a <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d80e      	bhi.n	8000e00 <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000de2:	4413      	add	r3, r2
 8000de4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000de6:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000dea:	231f      	movs	r3, #31
 8000dec:	4093      	lsls	r3, r2
 8000dee:	ea21 0303 	bic.w	r3, r1, r3
 8000df2:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000df4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000df6:	fa06 f202 	lsl.w	r2, r6, r2
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	6322      	str	r2, [r4, #48]	; 0x30
 8000dfe:	e00c      	b.n	8000e1a <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e00:	4413      	add	r3, r2
 8000e02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000e04:	3b41      	subs	r3, #65	; 0x41
 8000e06:	221f      	movs	r2, #31
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	ea27 0202 	bic.w	r2, r7, r2
 8000e0e:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e12:	fa06 f203 	lsl.w	r2, r6, r3
 8000e16:	430a      	orrs	r2, r1
 8000e18:	62e2      	str	r2, [r4, #44]	; 0x2c
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_ADC_ConfigChannel+0x11c>)
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	d004      	beq.n	8000e2a <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e20:	2300      	movs	r3, #0
 8000e22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e26:	4618      	mov	r0, r3
 8000e28:	e022      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x118>
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e2a:	2d12      	cmp	r5, #18
 8000e2c:	d107      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_ADC_ConfigChannel+0x120>)
 8000e30:	6853      	ldr	r3, [r2, #4]
 8000e32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e36:	6053      	str	r3, [r2, #4]
 8000e38:	e001      	b.n	8000e3e <HAL_ADC_ConfigChannel+0xe6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	e018      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x118>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e3e:	f1a5 0310 	sub.w	r3, r5, #16
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d8ec      	bhi.n	8000e20 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_ADC_ConfigChannel+0x120>)
 8000e48:	6853      	ldr	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e4a:	2d10      	cmp	r5, #16
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e50:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e52:	d1e5      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_ADC_ConfigChannel+0x124>)
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_ADC_ConfigChannel+0x128>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e5e:	230a      	movs	r3, #10
 8000e60:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 8000e62:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000e64:	9b01      	ldr	r3, [sp, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0da      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7f8      	b.n	8000e62 <HAL_ADC_ConfigChannel+0x10a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 8000e70:	b003      	add	sp, #12
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	000f4240 	.word	0x000f4240

08000e84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e86:	68d3      	ldr	r3, [r2, #12]
 8000e88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000e94:	0200      	lsls	r0, r0, #8
 8000e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000e9e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000ea0:	60d3      	str	r3, [r2, #12]
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_NVIC_SetPriority+0x60>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	2c04      	cmp	r4, #4
 8000eba:	bf28      	it	cs
 8000ebc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	2d06      	cmp	r5, #6

  return (
 8000ec0:	f04f 0501 	mov.w	r5, #1
 8000ec4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ec8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ecc:	bf8c      	ite	hi
 8000ece:	3b03      	subhi	r3, #3
 8000ed0:	2300      	movls	r3, #0

  return (
 8000ed2:	400c      	ands	r4, r1
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	fa05 f303 	lsl.w	r3, r5, r3
 8000eda:	3b01      	subs	r3, #1
 8000edc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000ede:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000ee0:	ea42 0204 	orr.w	r2, r2, r4
 8000ee4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	bfaf      	iteee	ge
 8000eea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	f000 000f 	andlt.w	r0, r0, #15
 8000ef2:	4b06      	ldrlt	r3, [pc, #24]	; (8000f0c <HAL_NVIC_SetPriority+0x64>)
 8000ef4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	bfa5      	ittet	ge
 8000ef8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000efc:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f04:	bd30      	pop	{r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	e000ed14 	.word	0xe000ed14

08000f10 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f10:	0942      	lsrs	r2, r0, #5
 8000f12:	2301      	movs	r3, #1
 8000f14:	f000 001f 	and.w	r0, r0, #31
 8000f18:	fa03 f000 	lsl.w	r0, r3, r0
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_NVIC_EnableIRQ+0x14>)
 8000f1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	3801      	subs	r0, #1
 8000f2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f2e:	d20a      	bcs.n	8000f46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f34:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	21f0      	movs	r1, #240	; 0xf0
 8000f38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f56:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f58:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f5a:	bf0c      	ite	eq
 8000f5c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f60:	f022 0204 	bicne.w	r2, r2, #4
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	4770      	bx	lr
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f6c:	4770      	bx	lr

08000f6e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f6e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f70:	f7ff fffc 	bl	8000f6c <HAL_SYSTICK_Callback>
 8000f74:	bd08      	pop	{r3, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	4f6a      	ldr	r7, [pc, #424]	; (8001128 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001130 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f84:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001134 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000f92:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000f96:	ea34 0303 	bics.w	r3, r4, r3
 8000f9a:	f040 80bd 	bne.w	8001118 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9e:	684d      	ldr	r5, [r1, #4]
 8000fa0:	f025 0a10 	bic.w	sl, r5, #16
 8000fa4:	f1ba 0f02 	cmp.w	sl, #2
 8000fa8:	d114      	bne.n	8000fd4 <HAL_GPIO_Init+0x5c>
 8000faa:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000fae:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	fa03 f30b 	lsl.w	r3, r3, fp
 8000fc4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	690b      	ldr	r3, [r1, #16]
 8000fca:	fa03 f30b 	lsl.w	r3, r3, fp
 8000fce:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000fd0:	f8c9 3020 	str.w	r3, [r9, #32]
 8000fd4:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd8:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	fa09 f90b 	lsl.w	r9, r9, fp
 8000fe2:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fee:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff6:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff8:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000ffc:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	d80f      	bhi.n	8001020 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001000:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001002:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001008:	fa06 f60b 	lsl.w	r6, r6, fp
 800100c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800100e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001012:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001016:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101a:	4096      	lsls	r6, r2
 800101c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800101e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001026:	688b      	ldr	r3, [r1, #8]
 8001028:	fa03 f30b 	lsl.w	r3, r3, fp
 800102c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001030:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	00eb      	lsls	r3, r5, #3
 8001034:	d570      	bpl.n	8001118 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	9303      	str	r3, [sp, #12]
 800103a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001044:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001048:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800104c:	f022 0903 	bic.w	r9, r2, #3
 8001050:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001054:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001058:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800105c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001064:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001068:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800106c:	260f      	movs	r6, #15
 800106e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001078:	d01c      	beq.n	80010b4 <HAL_GPIO_Init+0x13c>
 800107a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800107e:	4298      	cmp	r0, r3
 8001080:	d01a      	beq.n	80010b8 <HAL_GPIO_Init+0x140>
 8001082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001086:	4298      	cmp	r0, r3
 8001088:	d018      	beq.n	80010bc <HAL_GPIO_Init+0x144>
 800108a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800108e:	4298      	cmp	r0, r3
 8001090:	d016      	beq.n	80010c0 <HAL_GPIO_Init+0x148>
 8001092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001096:	4298      	cmp	r0, r3
 8001098:	d014      	beq.n	80010c4 <HAL_GPIO_Init+0x14c>
 800109a:	4540      	cmp	r0, r8
 800109c:	d014      	beq.n	80010c8 <HAL_GPIO_Init+0x150>
 800109e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010a2:	4298      	cmp	r0, r3
 80010a4:	d012      	beq.n	80010cc <HAL_GPIO_Init+0x154>
 80010a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010aa:	4298      	cmp	r0, r3
 80010ac:	bf14      	ite	ne
 80010ae:	2308      	movne	r3, #8
 80010b0:	2307      	moveq	r3, #7
 80010b2:	e00c      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e00a      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e008      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010bc:	2302      	movs	r3, #2
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010c8:	2305      	movs	r3, #5
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x156>
 80010cc:	2306      	movs	r3, #6
 80010ce:	fa03 f30a 	lsl.w	r3, r3, sl
 80010d2:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80010da:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80010e0:	bf0c      	ite	eq
 80010e2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80010e4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80010e6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80010ea:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ee:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80010f2:	bf0c      	ite	eq
 80010f4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80010f6:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80010f8:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001100:	bf0c      	ite	eq
 8001102:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001104:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001106:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800110a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001110:	bf54      	ite	pl
 8001112:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001114:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001116:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001118:	3201      	adds	r2, #1
 800111a:	2a10      	cmp	r2, #16
 800111c:	f47f af38 	bne.w	8000f90 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001120:	b005      	add	sp, #20
 8001122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001126:	bf00      	nop
 8001128:	40013c00 	.word	0x40013c00
 800112c:	40020000 	.word	0x40020000
 8001130:	40023800 	.word	0x40023800
 8001134:	40021400 	.word	0x40021400

08001138 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001138:	b902      	cbnz	r2, 800113c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	0409      	lsls	r1, r1, #16
 800113c:	6181      	str	r1, [r0, #24]
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001140:	4770      	bx	lr
	...

08001144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001144:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001148:	6959      	ldr	r1, [r3, #20]
 800114a:	4201      	tst	r1, r0
 800114c:	d002      	beq.n	8001154 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001150:	f7ff fff6 	bl	8001140 <HAL_GPIO_EXTI_Callback>
 8001154:	bd08      	pop	{r3, pc}
 8001156:	bf00      	nop
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	4604      	mov	r4, r0
 8001162:	b908      	cbnz	r0, 8001168 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001164:	2001      	movs	r0, #1
 8001166:	e161      	b.n	800142c <HAL_RCC_OscConfig+0x2d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001168:	6803      	ldr	r3, [r0, #0]
 800116a:	07d8      	lsls	r0, r3, #31
 800116c:	d403      	bmi.n	8001176 <HAL_RCC_OscConfig+0x1a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	0799      	lsls	r1, r3, #30
 8001172:	d44a      	bmi.n	800120a <HAL_RCC_OscConfig+0xae>
 8001174:	e08e      	b.n	8001294 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	f002 020c 	and.w	r2, r2, #12
 800117e:	2a04      	cmp	r2, #4
 8001180:	d007      	beq.n	8001192 <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001184:	f002 020c 	and.w	r2, r2, #12
 8001188:	2a08      	cmp	r2, #8
 800118a:	d10a      	bne.n	80011a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	025a      	lsls	r2, r3, #9
 8001190:	d507      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x46>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	039b      	lsls	r3, r3, #14
 8001198:	d5e9      	bpl.n	800116e <HAL_RCC_OscConfig+0x12>
 800119a:	6863      	ldr	r3, [r4, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
 80011a0:	e7e0      	b.n	8001164 <HAL_RCC_OscConfig+0x8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	4d96      	ldr	r5, [pc, #600]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011aa:	d006      	beq.n	80011ba <HAL_RCC_OscConfig+0x5e>
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d108      	bne.n	80011c4 <HAL_RCC_OscConfig+0x68>
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	602b      	str	r3, [r5, #0]
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	602b      	str	r3, [r5, #0]
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x7a>
 80011c4:	682a      	ldr	r2, [r5, #0]
 80011c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ca:	602a      	str	r2, [r5, #0]
 80011cc:	682a      	ldr	r2, [r5, #0]
 80011ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d2:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	b16b      	cbz	r3, 80011f2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fd15 	bl	8000c04 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4d89      	ldr	r5, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	039f      	lsls	r7, r3, #14
 80011e2:	d4c4      	bmi.n	800116e <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fd0e 	bl	8000c04 <HAL_GetTick>
 80011e8:	1b80      	subs	r0, r0, r6
 80011ea:	2864      	cmp	r0, #100	; 0x64
 80011ec:	d9f7      	bls.n	80011de <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 80011ee:	2003      	movs	r0, #3
 80011f0:	e11c      	b.n	800142c <HAL_RCC_OscConfig+0x2d0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fd07 	bl	8000c04 <HAL_GetTick>
 80011f6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	0398      	lsls	r0, r3, #14
 80011fc:	d5b7      	bpl.n	800116e <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fe:	f7ff fd01 	bl	8000c04 <HAL_GetTick>
 8001202:	1b80      	subs	r0, r0, r6
 8001204:	2864      	cmp	r0, #100	; 0x64
 8001206:	d9f7      	bls.n	80011f8 <HAL_RCC_OscConfig+0x9c>
 8001208:	e7f1      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	f012 0f0c 	tst.w	r2, #12
 8001212:	d007      	beq.n	8001224 <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001214:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001216:	f002 020c 	and.w	r2, r2, #12
 800121a:	2a08      	cmp	r2, #8
 800121c:	d111      	bne.n	8001242 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	0259      	lsls	r1, r3, #9
 8001222:	d40e      	bmi.n	8001242 <HAL_RCC_OscConfig+0xe6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001224:	4b76      	ldr	r3, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	0792      	lsls	r2, r2, #30
 800122a:	d502      	bpl.n	8001232 <HAL_RCC_OscConfig+0xd6>
 800122c:	68e2      	ldr	r2, [r4, #12]
 800122e:	2a01      	cmp	r2, #1
 8001230:	d198      	bne.n	8001164 <HAL_RCC_OscConfig+0x8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6921      	ldr	r1, [r4, #16]
 8001236:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800123a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800123e:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001240:	e028      	b.n	8001294 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001242:	68e2      	ldr	r2, [r4, #12]
 8001244:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_RCC_OscConfig+0x2a8>)
 8001246:	b1ba      	cbz	r2, 8001278 <HAL_RCC_OscConfig+0x11c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fcda 	bl	8000c04 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4d6b      	ldr	r5, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001258:	079b      	lsls	r3, r3, #30
 800125a:	d405      	bmi.n	8001268 <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fcd2 	bl	8000c04 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f6      	bls.n	8001254 <HAL_RCC_OscConfig+0xf8>
 8001266:	e7c2      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	6921      	ldr	r1, [r4, #16]
 800126c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001270:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00d      	b.n	8001294 <HAL_RCC_OscConfig+0x138>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fcc3 	bl	8000c04 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4d60      	ldr	r5, [pc, #384]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	079f      	lsls	r7, r3, #30
 8001286:	d505      	bpl.n	8001294 <HAL_RCC_OscConfig+0x138>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fcbc 	bl	8000c04 <HAL_GetTick>
 800128c:	1b80      	subs	r0, r0, r6
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f7      	bls.n	8001282 <HAL_RCC_OscConfig+0x126>
 8001292:	e7ac      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	071e      	lsls	r6, r3, #28
 8001298:	d403      	bmi.n	80012a2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	075d      	lsls	r5, r3, #29
 800129e:	d548      	bpl.n	8001332 <HAL_RCC_OscConfig+0x1d6>
 80012a0:	e01f      	b.n	80012e2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a2:	6962      	ldr	r2, [r4, #20]
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	b172      	cbz	r2, 80012c6 <HAL_RCC_OscConfig+0x16a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fcaa 	bl	8000c04 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b0:	4d53      	ldr	r5, [pc, #332]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b2:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012b6:	0798      	lsls	r0, r3, #30
 80012b8:	d4ef      	bmi.n	800129a <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fca3 	bl	8000c04 <HAL_GetTick>
 80012be:	1b80      	subs	r0, r0, r6
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d9f7      	bls.n	80012b4 <HAL_RCC_OscConfig+0x158>
 80012c4:	e793      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fc9c 	bl	8000c04 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	4d4c      	ldr	r5, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d2:	0799      	lsls	r1, r3, #30
 80012d4:	d5e1      	bpl.n	800129a <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc95 	bl	8000c04 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9f7      	bls.n	80012d0 <HAL_RCC_OscConfig+0x174>
 80012e0:	e785      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80012e8:	4d48      	ldr	r5, [pc, #288]	; (800140c <HAL_RCC_OscConfig+0x2b0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	9b01      	ldr	r3, [sp, #4]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001304:	f7ff fc7e 	bl	8000c04 <HAL_GetTick>
 8001308:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	05da      	lsls	r2, r3, #23
 800130e:	d513      	bpl.n	8001338 <HAL_RCC_OscConfig+0x1dc>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	68a3      	ldr	r3, [r4, #8]
 8001312:	4d3b      	ldr	r5, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001314:	2b01      	cmp	r3, #1
 8001316:	d115      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e8>
 8001318:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fc70 	bl	8000c04 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	4d36      	ldr	r5, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132e:	079b      	lsls	r3, r3, #30
 8001330:	d519      	bpl.n	8001366 <HAL_RCC_OscConfig+0x20a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001332:	69a2      	ldr	r2, [r4, #24]
 8001334:	bb5a      	cbnz	r2, 800138e <HAL_RCC_OscConfig+0x232>
 8001336:	e054      	b.n	80013e2 <HAL_RCC_OscConfig+0x286>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001338:	f7ff fc64 	bl	8000c04 <HAL_GetTick>
 800133c:	1b80      	subs	r0, r0, r6
 800133e:	2802      	cmp	r0, #2
 8001340:	d9e3      	bls.n	800130a <HAL_RCC_OscConfig+0x1ae>
 8001342:	e754      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	2b05      	cmp	r3, #5
 8001346:	d104      	bne.n	8001352 <HAL_RCC_OscConfig+0x1f6>
 8001348:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	672b      	str	r3, [r5, #112]	; 0x70
 8001350:	e7e2      	b.n	8001318 <HAL_RCC_OscConfig+0x1bc>
 8001352:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	672a      	str	r2, [r5, #112]	; 0x70
 800135a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800135c:	f022 0204 	bic.w	r2, r2, #4
 8001360:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001362:	b133      	cbz	r3, 8001372 <HAL_RCC_OscConfig+0x216>
 8001364:	e7dc      	b.n	8001320 <HAL_RCC_OscConfig+0x1c4>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fc4d 	bl	8000c04 <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	42b8      	cmp	r0, r7
 800136e:	d9dd      	bls.n	800132c <HAL_RCC_OscConfig+0x1d0>
 8001370:	e73d      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fc47 	bl	8000c04 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137e:	0798      	lsls	r0, r3, #30
 8001380:	d5d7      	bpl.n	8001332 <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fc3f 	bl	8000c04 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	42b8      	cmp	r0, r7
 800138a:	d9f7      	bls.n	800137c <HAL_RCC_OscConfig+0x220>
 800138c:	e72f      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138e:	4d1c      	ldr	r5, [pc, #112]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 8001390:	68ab      	ldr	r3, [r5, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b08      	cmp	r3, #8
 8001398:	f43f aee4 	beq.w	8001164 <HAL_RCC_OscConfig+0x8>
 800139c:	4e1c      	ldr	r6, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x2b4>)
 800139e:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a4:	d136      	bne.n	8001414 <HAL_RCC_OscConfig+0x2b8>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc2d 	bl	8000c04 <HAL_GetTick>
 80013aa:	4680      	mov	r8, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	4f14      	ldr	r7, [pc, #80]	; (8001400 <HAL_RCC_OscConfig+0x2a4>)
 80013b0:	0199      	lsls	r1, r3, #6
 80013b2:	d418      	bmi.n	80013e6 <HAL_RCC_OscConfig+0x28a>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013b4:	69e2      	ldr	r2, [r4, #28]
 80013b6:	6a23      	ldr	r3, [r4, #32]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013c2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80013c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80013d0:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d2:	2301      	movs	r3, #1
 80013d4:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc15 	bl	8000c04 <HAL_GetTick>
 80013da:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	019a      	lsls	r2, r3, #6
 80013e0:	d508      	bpl.n	80013f4 <HAL_RCC_OscConfig+0x298>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80013e2:	2000      	movs	r0, #0
 80013e4:	e022      	b.n	800142c <HAL_RCC_OscConfig+0x2d0>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fc0d 	bl	8000c04 <HAL_GetTick>
 80013ea:	ebc8 0000 	rsb	r0, r8, r0
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9dc      	bls.n	80013ac <HAL_RCC_OscConfig+0x250>
 80013f2:	e6fc      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff fc06 	bl	8000c04 <HAL_GetTick>
 80013f8:	1b00      	subs	r0, r0, r4
 80013fa:	2802      	cmp	r0, #2
 80013fc:	d9ee      	bls.n	80013dc <HAL_RCC_OscConfig+0x280>
 80013fe:	e6f6      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
 8001400:	40023800 	.word	0x40023800
 8001404:	42470000 	.word	0x42470000
 8001408:	42470e80 	.word	0x42470e80
 800140c:	40007000 	.word	0x40007000
 8001410:	42470060 	.word	0x42470060
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fbf6 	bl	8000c04 <HAL_GetTick>
 8001418:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	d5e0      	bpl.n	80013e2 <HAL_RCC_OscConfig+0x286>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fbf0 	bl	8000c04 <HAL_GetTick>
 8001424:	1b00      	subs	r0, r0, r4
 8001426:	2802      	cmp	r0, #2
 8001428:	d9f7      	bls.n	800141a <HAL_RCC_OscConfig+0x2be>
 800142a:	e6e0      	b.n	80011ee <HAL_RCC_OscConfig+0x92>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800142c:	b002      	add	sp, #8
 800142e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001432:	bf00      	nop

08001434 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001434:	4913      	ldr	r1, [pc, #76]	; (8001484 <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001436:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001438:	688b      	ldr	r3, [r1, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d01c      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x48>
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001446:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001448:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144a:	6849      	ldr	r1, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	bf14      	ite	ne
 8001452:	480d      	ldrne	r0, [pc, #52]	; (8001488 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001454:	480d      	ldreq	r0, [pc, #52]	; (800148c <HAL_RCC_GetSysClockFreq+0x58>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001456:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800145a:	bf18      	it	ne
 800145c:	2300      	movne	r3, #0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001462:	fba1 0100 	umull	r0, r1, r1, r0
 8001466:	f7fe feaf 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_RCC_GetSysClockFreq+0x50>)
 800146c:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 800146e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001472:	3301      	adds	r3, #1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fbb0 f0f3 	udiv	r0, r0, r3
 800147a:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <HAL_RCC_GetSysClockFreq+0x54>)
 800147e:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001482:	bd08      	pop	{r3, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	007a1200 	.word	0x007a1200
 800148c:	00f42400 	.word	0x00f42400

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001496:	4604      	mov	r4, r0
 8001498:	b910      	cbnz	r0, 80014a0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_ClockConfig+0x120>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f002 020f 	and.w	r2, r2, #15
 80014a8:	428a      	cmp	r2, r1
 80014aa:	d317      	bcc.n	80014dc <HAL_RCC_ClockConfig+0x4c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	0796      	lsls	r6, r2, #30
 80014b0:	d51c      	bpl.n	80014ec <HAL_RCC_ClockConfig+0x5c>
 80014b2:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	f012 0f04 	tst.w	r2, #4
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	bf1e      	ittt	ne
 80014ba:	6899      	ldrne	r1, [r3, #8]
 80014bc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80014c0:	6099      	strne	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	0710      	lsls	r0, r2, #28
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	bf42      	ittt	mi
 80014c6:	6899      	ldrmi	r1, [r3, #8]
 80014c8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80014cc:	6099      	strmi	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 80014d4:	68a1      	ldr	r1, [r4, #8]
 80014d6:	4301      	orrs	r1, r0
 80014d8:	6099      	str	r1, [r3, #8]
 80014da:	e007      	b.n	80014ec <HAL_RCC_ClockConfig+0x5c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	4299      	cmp	r1, r3
 80014e8:	d1d7      	bne.n	800149a <HAL_RCC_ClockConfig+0xa>
 80014ea:	e7df      	b.n	80014ac <HAL_RCC_ClockConfig+0x1c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ec:	07d1      	lsls	r1, r2, #31
 80014ee:	d406      	bmi.n	80014fe <HAL_RCC_ClockConfig+0x6e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_ClockConfig+0x120>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f002 020f 	and.w	r2, r2, #15
 80014f8:	4295      	cmp	r5, r2
 80014fa:	d32c      	bcc.n	8001556 <HAL_RCC_ClockConfig+0xc6>
 80014fc:	e032      	b.n	8001564 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	6863      	ldr	r3, [r4, #4]
 8001500:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 8001502:	2b01      	cmp	r3, #1
 8001504:	d103      	bne.n	800150e <HAL_RCC_ClockConfig+0x7e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800150c:	e008      	b.n	8001520 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	1e99      	subs	r1, r3, #2
 8001510:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001514:	d802      	bhi.n	800151c <HAL_RCC_ClockConfig+0x8c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800151a:	e001      	b.n	8001520 <HAL_RCC_ClockConfig+0x90>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	f012 0f02 	tst.w	r2, #2
 8001520:	d0bb      	beq.n	800149a <HAL_RCC_ClockConfig+0xa>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	4e24      	ldr	r6, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 8001524:	68b2      	ldr	r2, [r6, #8]
 8001526:	f022 0203 	bic.w	r2, r2, #3
 800152a:	4313      	orrs	r3, r2
 800152c:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800152e:	f7ff fb69 	bl	8000c04 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001532:	f241 3888 	movw	r8, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001536:	4607      	mov	r7, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001538:	68b3      	ldr	r3, [r6, #8]
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001544:	d0d4      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x60>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff fb5d 	bl	8000c04 <HAL_GetTick>
 800154a:	1bc0      	subs	r0, r0, r7
 800154c:	4540      	cmp	r0, r8
 800154e:	d9f3      	bls.n	8001538 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	b2ea      	uxtb	r2, r5
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	429d      	cmp	r5, r3
 8001562:	d19a      	bne.n	800149a <HAL_RCC_ClockConfig+0xa>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	6821      	ldr	r1, [r4, #0]
 8001566:	074a      	lsls	r2, r1, #29
 8001568:	d506      	bpl.n	8001578 <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 800156c:	6883      	ldr	r3, [r0, #8]
 800156e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001572:	68e3      	ldr	r3, [r4, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	6083      	str	r3, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	070b      	lsls	r3, r1, #28
 800157a:	d507      	bpl.n	800158c <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 800157e:	6921      	ldr	r1, [r4, #16]
 8001580:	6893      	ldr	r3, [r2, #8]
 8001582:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001586:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800158a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158c:	f7ff ff52 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_ClockConfig+0x12c>)
 80015a0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff faf8 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2000      	movs	r0, #0
 80015aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	08001ef7 	.word	0x08001ef7
 80015bc:	20000000 	.word	0x20000000

080015c0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015c0:	4b01      	ldr	r3, [pc, #4]	; (80015c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015da:	6810      	ldr	r0, [r2, #0]
}
 80015dc:	40d8      	lsrs	r0, r3
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08001f07 	.word	0x08001f07
 80015e8:	20000000 	.word	0x20000000

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015fa:	6810      	ldr	r0, [r2, #0]
}
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800
 8001604:	08001f07 	.word	0x08001f07
 8001608:	20000000 	.word	0x20000000

0800160c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800160c:	6a03      	ldr	r3, [r0, #32]
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001614:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001616:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001618:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800161a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800161c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800161e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001622:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001624:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001628:	688b      	ldr	r3, [r1, #8]
 800162a:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800162c:	4c0c      	ldr	r4, [pc, #48]	; (8001660 <TIM_OC1_SetConfig+0x54>)
 800162e:	42a0      	cmp	r0, r4
 8001630:	d009      	beq.n	8001646 <TIM_OC1_SetConfig+0x3a>
 8001632:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001636:	42a0      	cmp	r0, r4
 8001638:	d005      	beq.n	8001646 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800163a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800163c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800163e:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001640:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001642:	6203      	str	r3, [r0, #32]
} 
 8001644:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001646:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001648:	694e      	ldr	r6, [r1, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800164a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800164e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001650:	698c      	ldr	r4, [r1, #24]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001652:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001656:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001658:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800165c:	4322      	orrs	r2, r4
 800165e:	e7ec      	b.n	800163a <TIM_OC1_SetConfig+0x2e>
 8001660:	40010000 	.word	0x40010000

08001664 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001664:	6a03      	ldr	r3, [r0, #32]
 8001666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800166c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800166e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001670:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001672:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001674:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001676:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800167a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800167c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800167e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001682:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001686:	4d0e      	ldr	r5, [pc, #56]	; (80016c0 <TIM_OC3_SetConfig+0x5c>)
 8001688:	42a8      	cmp	r0, r5
 800168a:	d009      	beq.n	80016a0 <TIM_OC3_SetConfig+0x3c>
 800168c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001690:	42a8      	cmp	r0, r5
 8001692:	d005      	beq.n	80016a0 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001694:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001696:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001698:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800169a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800169c:	6203      	str	r3, [r0, #32]
}
 800169e:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016a0:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80016a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80016aa:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80016ac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80016b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016b4:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80016b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016ba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80016be:	e7e9      	b.n	8001694 <TIM_OC3_SetConfig+0x30>
 80016c0:	40010000 	.word	0x40010000

080016c4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016c4:	6a03      	ldr	r3, [r0, #32]
 80016c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ca:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016cc:	b530      	push	{r4, r5, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ce:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016d0:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016d2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016d4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016d6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016de:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80016e0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016e4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80016e8:	4d09      	ldr	r5, [pc, #36]	; (8001710 <TIM_OC4_SetConfig+0x4c>)
 80016ea:	42a8      	cmp	r0, r5
 80016ec:	d009      	beq.n	8001702 <TIM_OC4_SetConfig+0x3e>
 80016ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016f2:	42a8      	cmp	r0, r5
 80016f4:	d005      	beq.n	8001702 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016f6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016f8:	684b      	ldr	r3, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80016fa:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016fc:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016fe:	6204      	str	r4, [r0, #32]
}
 8001700:	bd30      	pop	{r4, r5, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001702:	694d      	ldr	r5, [r1, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001708:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800170c:	e7f3      	b.n	80016f6 <TIM_OC4_SetConfig+0x32>
 800170e:	bf00      	nop
 8001710:	40010000 	.word	0x40010000

08001714 <HAL_TIM_PWM_MspInit>:
 8001714:	4770      	bx	lr

08001716 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001716:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800171a:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001722:	f000 80b0 	beq.w	8001886 <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001726:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800172a:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800172c:	2201      	movs	r2, #1
 800172e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001732:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001734:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001738:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800173c:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800173e:	680a      	ldr	r2, [r1, #0]
 8001740:	2a40      	cmp	r2, #64	; 0x40
 8001742:	d077      	beq.n	8001834 <HAL_TIM_ConfigClockSource+0x11e>
 8001744:	d818      	bhi.n	8001778 <HAL_TIM_ConfigClockSource+0x62>
 8001746:	2a10      	cmp	r2, #16
 8001748:	f000 808b 	beq.w	8001862 <HAL_TIM_ConfigClockSource+0x14c>
 800174c:	d808      	bhi.n	8001760 <HAL_TIM_ConfigClockSource+0x4a>
 800174e:	2a00      	cmp	r2, #0
 8001750:	f040 8093 	bne.w	800187a <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001754:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001756:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800175a:	f042 0207 	orr.w	r2, r2, #7
 800175e:	e08b      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001760:	2a20      	cmp	r2, #32
 8001762:	f000 8084 	beq.w	800186e <HAL_TIM_ConfigClockSource+0x158>
 8001766:	2a30      	cmp	r2, #48	; 0x30
 8001768:	f040 8087 	bne.w	800187a <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800176c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800176e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001772:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001776:	e07f      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001778:	2a70      	cmp	r2, #112	; 0x70
 800177a:	d035      	beq.n	80017e8 <HAL_TIM_ConfigClockSource+0xd2>
 800177c:	d81b      	bhi.n	80017b6 <HAL_TIM_ConfigClockSource+0xa0>
 800177e:	2a50      	cmp	r2, #80	; 0x50
 8001780:	d041      	beq.n	8001806 <HAL_TIM_ConfigClockSource+0xf0>
 8001782:	2a60      	cmp	r2, #96	; 0x60
 8001784:	d179      	bne.n	800187a <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001786:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001788:	684d      	ldr	r5, [r1, #4]
 800178a:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800178c:	f024 0410 	bic.w	r4, r4, #16
 8001790:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001792:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001794:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001796:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800179a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800179e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017a2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80017a6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80017a8:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80017aa:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80017ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017b0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80017b4:	e060      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80017b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017ba:	d011      	beq.n	80017e0 <HAL_TIM_ConfigClockSource+0xca>
 80017bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80017c0:	d15b      	bne.n	800187a <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80017c2:	689c      	ldr	r4, [r3, #8]
 80017c4:	688d      	ldr	r5, [r1, #8]
 80017c6:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80017c8:	68c9      	ldr	r1, [r1, #12]
 80017ca:	432a      	orrs	r2, r5
 80017cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80017d0:	4322      	orrs	r2, r4
 80017d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017d6:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017de:	e04b      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	f022 0207 	bic.w	r2, r2, #7
 80017e6:	e047      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80017e8:	689c      	ldr	r4, [r3, #8]
 80017ea:	688d      	ldr	r5, [r1, #8]
 80017ec:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80017ee:	68c9      	ldr	r1, [r1, #12]
 80017f0:	432a      	orrs	r2, r5
 80017f2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80017f6:	4322      	orrs	r2, r4
 80017f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017fc:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 80017fe:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001800:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001804:	e038      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001806:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001808:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 800180a:	684d      	ldr	r5, [r1, #4]
 800180c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800180e:	f024 0401 	bic.w	r4, r4, #1
 8001812:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001814:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001816:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800181a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800181e:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001820:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001824:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001826:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001828:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800182a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800182e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001832:	e021      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001834:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001836:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001838:	684d      	ldr	r5, [r1, #4]
 800183a:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800183c:	f024 0401 	bic.w	r4, r4, #1
 8001840:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001842:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001844:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001848:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800184c:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800184e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001852:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001854:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001856:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001858:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800185c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001860:	e00a      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001862:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001864:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001868:	f042 0217 	orr.w	r2, r2, #23
 800186c:	e004      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800186e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001870:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001874:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001878:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800187a:	2301      	movs	r3, #1
 800187c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001880:	2300      	movs	r3, #0
 8001882:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001886:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8001888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800188c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800188c:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800188e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001890:	4290      	cmp	r0, r2
 8001892:	d012      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 8001894:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001898:	d00f      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 800189a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800189e:	4290      	cmp	r0, r2
 80018a0:	d00b      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a6:	4290      	cmp	r0, r2
 80018a8:	d007      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ae:	4290      	cmp	r0, r2
 80018b0:	d003      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80018b6:	4290      	cmp	r0, r2
 80018b8:	d118      	bne.n	80018ec <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80018ba:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018c0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <TIM_Base_SetConfig+0xbc>)
 80018c4:	4290      	cmp	r0, r2
 80018c6:	d037      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018cc:	d034      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <TIM_Base_SetConfig+0xc0>)
 80018d0:	4290      	cmp	r0, r2
 80018d2:	d031      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018d8:	4290      	cmp	r0, r2
 80018da:	d02d      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018e0:	4290      	cmp	r0, r2
 80018e2:	d029      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018e4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80018e8:	4290      	cmp	r0, r2
 80018ea:	d025      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018ec:	4a18      	ldr	r2, [pc, #96]	; (8001950 <TIM_Base_SetConfig+0xc4>)
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d022      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f6:	4290      	cmp	r0, r2
 80018f8:	d01e      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 80018fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018fe:	4290      	cmp	r0, r2
 8001900:	d01a      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 8001902:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001906:	4290      	cmp	r0, r2
 8001908:	d016      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 800190a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190e:	4290      	cmp	r0, r2
 8001910:	d012      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
 8001912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001916:	4290      	cmp	r0, r2
 8001918:	d00e      	beq.n	8001938 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800191a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800191c:	688b      	ldr	r3, [r1, #8]
 800191e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001920:	680b      	ldr	r3, [r1, #0]
 8001922:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <TIM_Base_SetConfig+0xbc>)
 8001926:	4298      	cmp	r0, r3
 8001928:	d00b      	beq.n	8001942 <TIM_Base_SetConfig+0xb6>
 800192a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192e:	4298      	cmp	r0, r3
 8001930:	d007      	beq.n	8001942 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001932:	2301      	movs	r3, #1
 8001934:	6143      	str	r3, [r0, #20]
}
 8001936:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001938:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800193a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193e:	4313      	orrs	r3, r2
 8001940:	e7eb      	b.n	800191a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001942:	690b      	ldr	r3, [r1, #16]
 8001944:	6303      	str	r3, [r0, #48]	; 0x30
 8001946:	e7f4      	b.n	8001932 <TIM_Base_SetConfig+0xa6>
 8001948:	40010000 	.word	0x40010000
 800194c:	40000400 	.word	0x40000400
 8001950:	40014000 	.word	0x40014000

08001954 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001954:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001956:	4604      	mov	r4, r0
 8001958:	b1a0      	cbz	r0, 8001984 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800195a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800195e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001962:	b91b      	cbnz	r3, 800196c <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001964:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001968:	f7ff f802 	bl	8000970 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800196c:	2302      	movs	r3, #2
 800196e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001972:	6820      	ldr	r0, [r4, #0]
 8001974:	1d21      	adds	r1, r4, #4
 8001976:	f7ff ff89 	bl	800188c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
 8001982:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001984:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001986:	bd10      	pop	{r4, pc}

08001988 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001988:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800198a:	4604      	mov	r4, r0
 800198c:	b1a0      	cbz	r0, 80019b8 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800198e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001992:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001996:	b91b      	cbnz	r3, 80019a0 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001998:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800199c:	f7ff feba 	bl	8001714 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80019a0:	2302      	movs	r3, #2
 80019a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	1d21      	adds	r1, r4, #4
 80019aa:	f7ff ff6f 	bl	800188c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80019b4:	2000      	movs	r0, #0
 80019b6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 80019ba:	bd10      	pop	{r4, pc}

080019bc <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80019c0:	4605      	mov	r5, r0
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d041      	beq.n	8001a4a <HAL_TIM_Encoder_Init+0x8e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80019c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ce:	b91b      	cbnz	r3, 80019d8 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80019d4:	f7fe ffa6 	bl	8000924 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019d8:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80019da:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019dc:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80019e0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019e4:	6883      	ldr	r3, [r0, #8]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80019ec:	f7ff ff4e 	bl	800188c <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019f0:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80019f2:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019f4:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80019f6:	6981      	ldr	r1, [r0, #24]
 80019f8:	69a2      	ldr	r2, [r4, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80019fa:	6a06      	ldr	r6, [r0, #32]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80019fc:	431f      	orrs	r7, r3
 80019fe:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8001a02:	f023 0303 	bic.w	r3, r3, #3
 8001a06:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001a0a:	68a3      	ldr	r3, [r4, #8]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a0c:	6921      	ldr	r1, [r4, #16]
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001a0e:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a10:	69e2      	ldr	r2, [r4, #28]
 8001a12:	0109      	lsls	r1, r1, #4
 8001a14:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001a18:	68e2      	ldr	r2, [r4, #12]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001a1e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a22:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001a26:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001a2a:	6961      	ldr	r1, [r4, #20]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 8001a32:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a36:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a38:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a3a:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001a3c:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a3e:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a40:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a42:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
 8001a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a50 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a50:	6a03      	ldr	r3, [r0, #32]
 8001a52:	f023 0310 	bic.w	r3, r3, #16
 8001a56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001a58:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001a5a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a5c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a5e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a60:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a62:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a66:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a6a:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001a6c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001a74:	4d0e      	ldr	r5, [pc, #56]	; (8001ab0 <TIM_OC2_SetConfig+0x60>)
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	d009      	beq.n	8001a8e <TIM_OC2_SetConfig+0x3e>
 8001a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d005      	beq.n	8001a8e <TIM_OC2_SetConfig+0x3e>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a82:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a84:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a86:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a88:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a8a:	6203      	str	r3, [r0, #32]
}
 8001a8c:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a8e:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a98:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a9e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001aa2:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001aa8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001aac:	e7e9      	b.n	8001a82 <TIM_OC2_SetConfig+0x32>
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000

08001ab4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001ab4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ab6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001aba:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ac4:	d058      	beq.n	8001b78 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8001ad0:	2a0c      	cmp	r2, #12
 8001ad2:	d84b      	bhi.n	8001b6c <HAL_TIM_PWM_ConfigChannel+0xb8>
 8001ad4:	e8df f002 	tbb	[pc, r2]
 8001ad8:	4a4a4a07 	.word	0x4a4a4a07
 8001adc:	4a4a4a17 	.word	0x4a4a4a17
 8001ae0:	4a4a4a29 	.word	0x4a4a4a29
 8001ae4:	39          	.byte	0x39
 8001ae5:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	f7ff fd90 	bl	800160c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	f042 0208 	orr.w	r2, r2, #8
 8001af4:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001afe:	6999      	ldr	r1, [r3, #24]
 8001b00:	692a      	ldr	r2, [r5, #16]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	e00f      	b.n	8001b26 <HAL_TIM_PWM_ConfigChannel+0x72>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b06:	6820      	ldr	r0, [r4, #0]
 8001b08:	f7ff ffa2 	bl	8001a50 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b0c:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b0e:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b16:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b26:	619a      	str	r2, [r3, #24]
    }
    break;
 8001b28:	e020      	b.n	8001b6c <HAL_TIM_PWM_ConfigChannel+0xb8>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	f7ff fd9a 	bl	8001664 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	f042 0208 	orr.w	r2, r2, #8
 8001b38:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001b42:	69d9      	ldr	r1, [r3, #28]
 8001b44:	692a      	ldr	r2, [r5, #16]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	e00f      	b.n	8001b6a <HAL_TIM_PWM_ConfigChannel+0xb6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	f7ff fdba 	bl	80016c4 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b50:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001b52:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5a:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b6a:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8001b6e:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8001b74:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8001b78:	bd38      	pop	{r3, r4, r5, pc}

08001b7a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b7a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b7e:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001b80:	b510      	push	{r4, lr}
 8001b82:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b86:	d018      	beq.n	8001bba <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b8c:	6803      	ldr	r3, [r0, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b94:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001b96:	685c      	ldr	r4, [r3, #4]
 8001b98:	680a      	ldr	r2, [r1, #0]
 8001b9a:	4322      	orrs	r2, r4
 8001b9c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ba4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ba6:	689c      	ldr	r4, [r3, #8]
 8001ba8:	684a      	ldr	r2, [r1, #4]
 8001baa:	4322      	orrs	r2, r4
 8001bac:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001bba:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001bbc:	bd10      	pop	{r4, pc}
	...

08001bc0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001bc4:	6807      	ldr	r7, [r0, #0]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc8:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bce:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd0:	68a1      	ldr	r1, [r4, #8]
 8001bd2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bd4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001bd8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001bda:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001be0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001be8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bec:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001bf0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bf6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bfc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c04:	d17c      	bne.n	8001d00 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c06:	429f      	cmp	r7, r3
 8001c08:	d003      	beq.n	8001c12 <UART_SetConfig+0x52>
 8001c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0e:	429f      	cmp	r7, r3
 8001c10:	d131      	bne.n	8001c76 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c12:	f7ff fceb 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	2519      	movs	r5, #25
 8001c1a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001c1e:	4368      	muls	r0, r5
 8001c20:	fbb0 f8f8 	udiv	r8, r0, r8
 8001c24:	f7ff fce2 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c28:	6866      	ldr	r6, [r4, #4]
 8001c2a:	4368      	muls	r0, r5
 8001c2c:	0076      	lsls	r6, r6, #1
 8001c2e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c32:	f7ff fcdb 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c36:	6863      	ldr	r3, [r4, #4]
 8001c38:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4368      	muls	r0, r5
 8001c40:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c44:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c48:	fb09 6610 	mls	r6, r9, r0, r6
 8001c4c:	f7ff fcce 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c50:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c54:	6861      	ldr	r1, [r4, #4]
 8001c56:	00f6      	lsls	r6, r6, #3
 8001c58:	3632      	adds	r6, #50	; 0x32
 8001c5a:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c5e:	0076      	lsls	r6, r6, #1
 8001c60:	4368      	muls	r0, r5
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001c68:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001c6c:	fbb0 faf1 	udiv	sl, r0, r1
 8001c70:	f7ff fcbc 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c74:	e030      	b.n	8001cd8 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c76:	f7ff fca9 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001c7a:	6863      	ldr	r3, [r4, #4]
 8001c7c:	2519      	movs	r5, #25
 8001c7e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001c82:	4368      	muls	r0, r5
 8001c84:	fbb0 f8f8 	udiv	r8, r0, r8
 8001c88:	f7ff fca0 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001c8c:	6866      	ldr	r6, [r4, #4]
 8001c8e:	4368      	muls	r0, r5
 8001c90:	0076      	lsls	r6, r6, #1
 8001c92:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c96:	f7ff fc99 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4368      	muls	r0, r5
 8001ca4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca8:	fbb0 f0f9 	udiv	r0, r0, r9
 8001cac:	fb09 6610 	mls	r6, r9, r0, r6
 8001cb0:	f7ff fc8c 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001cb4:	fbb8 f8f9 	udiv	r8, r8, r9
 8001cb8:	00f6      	lsls	r6, r6, #3
 8001cba:	6861      	ldr	r1, [r4, #4]
 8001cbc:	3632      	adds	r6, #50	; 0x32
 8001cbe:	fbb6 f6f9 	udiv	r6, r6, r9
 8001cc2:	0076      	lsls	r6, r6, #1
 8001cc4:	4368      	muls	r0, r5
 8001cc6:	0049      	lsls	r1, r1, #1
 8001cc8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001ccc:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001cd0:	fbb0 faf1 	udiv	sl, r0, r1
 8001cd4:	f7ff fc7a 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001cd8:	4345      	muls	r5, r0
 8001cda:	6860      	ldr	r0, [r4, #4]
 8001cdc:	0040      	lsls	r0, r0, #1
 8001cde:	fbb5 f0f0 	udiv	r0, r5, r0
 8001ce2:	fbb0 f0f9 	udiv	r0, r0, r9
 8001ce6:	fb09 a210 	mls	r2, r9, r0, sl
 8001cea:	00d2      	lsls	r2, r2, #3
 8001cec:	3232      	adds	r2, #50	; 0x32
 8001cee:	fbb2 f3f9 	udiv	r3, r2, r9
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	4443      	add	r3, r8
 8001cf8:	441e      	add	r6, r3
 8001cfa:	60be      	str	r6, [r7, #8]
 8001cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d00:	429f      	cmp	r7, r3
 8001d02:	d002      	beq.n	8001d0a <UART_SetConfig+0x14a>
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <UART_SetConfig+0x238>)
 8001d06:	429f      	cmp	r7, r3
 8001d08:	d130      	bne.n	8001d6c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d0a:	f7ff fc6f 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	2519      	movs	r5, #25
 8001d12:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001d16:	4368      	muls	r0, r5
 8001d18:	fbb0 f8f8 	udiv	r8, r0, r8
 8001d1c:	f7ff fc66 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001d20:	6866      	ldr	r6, [r4, #4]
 8001d22:	4368      	muls	r0, r5
 8001d24:	00b6      	lsls	r6, r6, #2
 8001d26:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d2a:	f7ff fc5f 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001d2e:	6863      	ldr	r3, [r4, #4]
 8001d30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4368      	muls	r0, r5
 8001d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3c:	fbb0 f0f9 	udiv	r0, r0, r9
 8001d40:	fb09 6610 	mls	r6, r9, r0, r6
 8001d44:	f7ff fc52 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001d48:	fbb8 f8f9 	udiv	r8, r8, r9
 8001d4c:	6861      	ldr	r1, [r4, #4]
 8001d4e:	0136      	lsls	r6, r6, #4
 8001d50:	4368      	muls	r0, r5
 8001d52:	0089      	lsls	r1, r1, #2
 8001d54:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001d58:	3632      	adds	r6, #50	; 0x32
 8001d5a:	fbb0 faf1 	udiv	sl, r0, r1
 8001d5e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001d62:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001d66:	f7ff fc41 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001d6a:	e02f      	b.n	8001dcc <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d6c:	f7ff fc2e 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001d70:	6863      	ldr	r3, [r4, #4]
 8001d72:	2519      	movs	r5, #25
 8001d74:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001d78:	4368      	muls	r0, r5
 8001d7a:	fbb0 f8f8 	udiv	r8, r0, r8
 8001d7e:	f7ff fc25 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001d82:	6866      	ldr	r6, [r4, #4]
 8001d84:	4368      	muls	r0, r5
 8001d86:	00b6      	lsls	r6, r6, #2
 8001d88:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d8c:	f7ff fc1e 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4368      	muls	r0, r5
 8001d9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d9e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001da2:	fb09 6610 	mls	r6, r9, r0, r6
 8001da6:	f7ff fc11 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001daa:	fbb8 f8f9 	udiv	r8, r8, r9
 8001dae:	6861      	ldr	r1, [r4, #4]
 8001db0:	0136      	lsls	r6, r6, #4
 8001db2:	3632      	adds	r6, #50	; 0x32
 8001db4:	4368      	muls	r0, r5
 8001db6:	fbb6 f6f9 	udiv	r6, r6, r9
 8001dba:	0089      	lsls	r1, r1, #2
 8001dbc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001dc0:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001dc4:	fbb0 faf1 	udiv	sl, r0, r1
 8001dc8:	f7ff fc00 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001dcc:	4345      	muls	r5, r0
 8001dce:	6860      	ldr	r0, [r4, #4]
 8001dd0:	0080      	lsls	r0, r0, #2
 8001dd2:	fbb5 f0f0 	udiv	r0, r5, r0
 8001dd6:	fbb0 f0f9 	udiv	r0, r0, r9
 8001dda:	fb09 a210 	mls	r2, r9, r0, sl
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	3232      	adds	r2, #50	; 0x32
 8001de2:	fbb2 f3f9 	udiv	r3, r2, r9
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	4433      	add	r3, r6
 8001dec:	4443      	add	r3, r8
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40011400 	.word	0x40011400

08001dfc <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dfc:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b340      	cbz	r0, 8001e54 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e0a:	b91b      	cbnz	r3, 8001e14 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001e10:	f7fe fe72 	bl	8000af8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e14:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e16:	2324      	movs	r3, #36	; 0x24
 8001e18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e1c:	68d3      	ldr	r3, [r2, #12]
 8001e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e22:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fecb 	bl	8001bc0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e3a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e42:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e44:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e46:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e48:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001e52:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001e54:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001e56:	bd10      	pop	{r4, pc}

08001e58 <__libc_init_array>:
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <__libc_init_array+0x3c>)
 8001e5c:	4c0e      	ldr	r4, [pc, #56]	; (8001e98 <__libc_init_array+0x40>)
 8001e5e:	1ae4      	subs	r4, r4, r3
 8001e60:	10a4      	asrs	r4, r4, #2
 8001e62:	2500      	movs	r5, #0
 8001e64:	461e      	mov	r6, r3
 8001e66:	42a5      	cmp	r5, r4
 8001e68:	d004      	beq.n	8001e74 <__libc_init_array+0x1c>
 8001e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e6e:	4798      	blx	r3
 8001e70:	3501      	adds	r5, #1
 8001e72:	e7f8      	b.n	8001e66 <__libc_init_array+0xe>
 8001e74:	f000 f816 	bl	8001ea4 <_init>
 8001e78:	4c08      	ldr	r4, [pc, #32]	; (8001e9c <__libc_init_array+0x44>)
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <__libc_init_array+0x48>)
 8001e7c:	1ae4      	subs	r4, r4, r3
 8001e7e:	10a4      	asrs	r4, r4, #2
 8001e80:	2500      	movs	r5, #0
 8001e82:	461e      	mov	r6, r3
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d004      	beq.n	8001e92 <__libc_init_array+0x3a>
 8001e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e8c:	4798      	blx	r3
 8001e8e:	3501      	adds	r5, #1
 8001e90:	e7f8      	b.n	8001e84 <__libc_init_array+0x2c>
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	08001f18 	.word	0x08001f18
 8001e98:	08001f18 	.word	0x08001f18
 8001e9c:	08001f1c 	.word	0x08001f1c
 8001ea0:	08001f18 	.word	0x08001f18

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
